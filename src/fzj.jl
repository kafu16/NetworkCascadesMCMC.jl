# In this script NetworkCascadesMCMC.jl is applied on grid generated by PowerDynamics.jl


"""
This function reads out the net power injections P_i from a .json-file that was
generated by PowerDynamics.jl and returns them as an array P.
"""
function read_injections_from_PowerDynamics_json(data)
    N_vertices = length(data["nodes"])
    P = []
    for i in 1:N_vertices
        P_i = data["nodes"][i]["params"]["P"]
        # data["nodes"][1]["params"]["P"] # this gives P_i of i-th vertes
        push!(P, P_i)
    end
    P
end


"""
This function changes the values of the net power injections P in a dictionary
that was generated from a .json-file that was generated by PowerDynamics.jl.
"""
function write_injections_to_PowerDynamics_json(data, P)
    N_vertices = length(P)
    for i in 1:N_vertices
        data["nodes"][i]["params"]["P"] = P[i] # this assigns new value to P_i of i-th vertex
    end
    data
end

"""
This function saves the dictionary with the optimized net injections P to a
.json-file.
"""
function write_json_optimizes_injections(data, filename)
    # this creates file with changed P_i
    # see https://discourse.julialang.org/t/how-to-write-data-to-file-with-json-jl/2993/2
    open(filename,"w") do f
        JSON.print(f, data, 4)
    end
end

# # alternative way of writing to file without formatting
# json_string = JSON.json(data)
# open("foo.json","w") do f
#     write(f, json_string)
# end


function gen_grid_from_PowerDynamics_json(data) # N_side: this number sqared gives number of vertices, for N_side > 2
    N_vertices = N_vertices = length(data["nodes"]) # N_vertices: number of vertices
    g = LightGraphs.SimpleGraph(N_vertices) # generates undirected graph

    M = length(data["lines"]) # M: number of edges
    for i in 1:M
        from = data["lines"][i]["params"]["from"]
        to = data["lines"][i]["params"]["to"]
        LightGraphs.add_edge!(g, from, to)
    end
    g
end


function optimize_and_export_grid_from_PowerDynamics_json(file, filename, annealing_schedule, k_max)

    data = JSON.parsefile(file)
    # typeof(data)
    P_PD = read_injections_from_PowerDynamics_json(data)

    # checking if grid is balanced
    if isapprox(sum(P_PD), 0; atol=0.1) == false
        error("ERROR: Grid is not balanced.")
    end

    g = gen_grid_from_PowerDynamics_json(data)
    F = flow(g, P_PD)
    C = maximum(abs.(F))

    P_PD_optimized, en = sim_anneal(g, P_PD, C, annealing_schedule, k_max)

    # test if optimized grid is stable
    F = flow(g, P_PD_optimized)
    if maximum(abs.(F)) > C
        error("ERROR: Generated grid is not N-stable.")
    end

    data = write_injections_to_PowerDynamics_json(data, P_PD_optimized)
    write_json_optimizes_injections(data, filename)
    P_PD_optimized, en
end


# ### experimenting how to extract graph directly from .json via PowerDynamics-format
# using PowerDynamics
# g = read_powergrid(file, Json)
#
# # extracting graph from read_powergrid()
# h = g.graph
# gplot(h)
#
# using LightGraphs
#
#
# PowerGrid(nodes::Array, lines::Array)
#
# g["nodes"]
#
# length(nodes)
#
# g = LightGraphs.SimpleGraph(length(nodes))
